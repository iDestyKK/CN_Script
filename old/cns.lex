/*
 * Lex grammar for CN_Script.
 *
 * Description:
 *     CN_Script is a subset of the C language which integrates tools that make
 *     coding in C a bit more managable, including data structures and other
 *     tools to enforce good coding behaviour. The CN_Script language will
 *     "transpile" into valid C Code (assuming you didn't mess up at all), and
 *     can be compiled with a C compiler afterwards.
 *
 * Author:
 *     Clara Nguyen
 */

%{
	/* C Includes */
	#include <stdio.h>
	#include <stdlib.h>
	#include <errno.h>

	/* Generated by yacc */
	#include "cns.tab.h"

	/* Globals */
	int inline_c_bracket_counter;
%}

%option noyywrap nounput yylineno
%x INLINE_C COMMENT FUNC_DECL

ascii          [a-zA-Z\_]
ascii_num      [a-zA-Z0-9\_]
ptr            [\*]

name {ascii}{ascii_num}*
type {ptr}*{name}

%%
 /* Lex Grammar */

 /* 
  * ---------------------------------------------------------------------------
  * CN_SCRIPT LANGUAGE SYNTAX
  * ---------------------------------------------------------------------------
  */

"#"{name} {
	printf("%s", yytext);
}

"/\*".*"\*/" {
	/* Multi-line comment */
	printf("%s", yytext);
}

"//".*"\n" {
	/* Single-line comment */
	printf("%s", yytext);
}

 /*
  * ---------------------------------------------------------------------------
  * INLINE RAW C CODE
  *
  * CN_Script allows inlining of C code. This code must be perfectly valid
  * C code that follows whatever standard you are compiling to.
  * ---------------------------------------------------------------------------
  */

"__INLINE_C {\n" {
	/*
	 * Begin Inlining
	 */
	
	BEGIN INLINE_C;
	inline_c_bracket_counter = 0;
}

<INLINE_C>"{" {
	printf("{");
	inline_c_bracket_counter++;
}

<INLINE_C>"}" {
	if (inline_c_bracket_counter) {
		printf("}");
		inline_c_bracket_counter--;
	}
	else
		BEGIN 0;
}

<INLINE_C>. {
	printf("%s", yytext);
}

 /* 
  * ---------------------------------------------------------------------------
  * FUNCTIONS
  * ---------------------------------------------------------------------------
  */
"func<"{type}"> "{name}":" {
	/* 
	 * Function Declaration
	 *
	 * CN_Script follows the rules of C, where a function can not begin with a
	 * digit... only an ASCII character such as a-z and A-Z.
	 */

	printf("%s\n", yytext);
	yylval.str = strdup(yytext);
	return FUNC_TOP;
}

 /* Types */

 /* Whatever else */
[\n\r\t]+ {
	printf("%s", yytext);
}

. {
	
}
