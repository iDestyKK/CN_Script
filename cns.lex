/*
 * Lex grammar for CN_Script.
 *
 * Description:
 *     CN_Script is a subset of the C language which integrates tools that make
 *     coding in C a bit more managable, including data structures and other
 *     tools to enforce good coding behaviour. The CN_Script language will
 *     "transpile" into valid C Code (assuming you didn't mess up at all), and
 *     can be compiled with a C compiler afterwards.
 *
 * Author:
 *     Clara Nguyen
 */

%{
	/* C Includes */
	#include <stdio.h>
	#include <stdlib.h>
	#include <errno.h>

	/* Generated by yacc */
	#include "cns.tab.h"

	/* Globals */
	int inline_c_bracket_counter;
%}

%option noyywrap nounput yylineno
%x INLINE_C COMMENT FUNC_DECL

ascii          [a-zA-Z_]
ascii_num      [a-zA-Z0-9_]
ptr            [\*]

name {ascii}{ascii_num}*
type {ptr}*{name}

%%
 /* Lex Grammar */

 /* 
  * ---------------------------------------------------------------------------
  * CN_SCRIPT LANGUAGE SYNTAX
  * ---------------------------------------------------------------------------
  */

"#"{name}" " {
	/*
	 * External Define
	 *
	 * This is for "#import", "#cimport", etc.
	 */
	if (strcmp(yytext, "#cimport ") == 0) {
		yylval.str = "include ";
	}
	else
		yylval.str = strdup(yytext + 1);
	return IMPORT;
}

"(".*"):" {
	/*
	 * Type Array Bracket Declaration
	 */
	yytext[yyleng - 1] = 0;
	yylval.str = strdup(yytext);
	return ARG_STR;
}

"func" { return FUNC; }
"fend" { return FEND; }


"<".*">" {
	/*
	 * Type Array Bracket Declaration
	 */
	yytext[yyleng - 1] = 0;
	yylval.str = strdup(yytext + 1);
	return ARR_STR;
}

"\"".*"\"" {
	/*
	 * Type Array Bracket Declaration
	 */
	yytext[yyleng - 1] = 0;
	yylval.str = strdup(yytext + 1);
	return QUOTE_STR;
}

"("    { return LEFT_PAREN;  }
")"    { return RIGHT_PAREN; }

{name} {
	/*
	 * Type Array Bracket Declaration
	 */
	yylval.str = strdup(yytext);
	return STR;
}

"/*".*"*/" {
	/* Multi-line comment */
	printf("%s", yytext);
}

"//".*"\n" {
	/* Single-line comment */
	printf("%s", yytext);
}

 /*
  * ---------------------------------------------------------------------------
  * INLINE RAW C CODE
  *
  * CN_Script allows inlining of C code. This code must be perfectly valid
  * C code that follows whatever standard you are compiling to.
  * ---------------------------------------------------------------------------
  */

"__INLINE_C {" {
	/*
	 * Begin Inlining
	 */
	
	BEGIN INLINE_C;
	inline_c_bracket_counter = 0;
}

<INLINE_C>"{" {
	printf("{");
	inline_c_bracket_counter++;
}

<INLINE_C>"}" {
	if (inline_c_bracket_counter) {
		printf("}");
		inline_c_bracket_counter--;
	}
	else
		BEGIN 0;
}

<INLINE_C>. {
	printf("%s", yytext);
}

 /* 
  * ---------------------------------------------------------------------------
  * FUNCTIONS
  * ---------------------------------------------------------------------------
  */
[\r\n]+ {
	printf("%s", yytext);
}

. {}
